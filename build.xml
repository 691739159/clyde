<?xml version="1.0" standalone="yes"?>
<project name="clyde" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <property name="src.dir"      value="src/java"/>
  <property name="tsrc.dir"     value="src/test/java"/>
  <property name="deploy.dir"   value="dist"/>
  <property name="classes.dir"  value="${deploy.dir}/classes"/>
  <property name="tclasses.dir" value="${deploy.dir}/test-classes"/>

  <property name="maven-ant.vers" value="2.1.1"/>
  <property name="maven-ant.dir" value="${user.home}/.m2/ant-support"/>
  <property name="maven-ant.jar" value="${maven-ant.dir}/maven-ant-tasks-${maven-ant.vers}.jar"/>
  <property name="maven-ant.url"
            value="http://mirrors.ibiblio.org/pub/mirrors/apache/maven/binaries"/>
  <condition property="maven-ant.exists"><available file="${maven-ant.jar}"/></condition>
  <target name="-download-maven-ant" unless="maven-ant.exists">
    <mkdir dir="${maven-ant.dir}"/>
    <get src="${maven-ant.url}/maven-ant-tasks-${maven-ant.vers}.jar"
         dest="${maven-ant.jar}" usetimestamp="true"/>
  </target>

  <target name="-init-maven-ant" depends="-download-maven-ant">
    <taskdef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="urn:maven-artifact-ant" classpath="${maven-ant.jar}"/>
    <artifact:pom id="pom" file="pom.xml"/>
    <artifact:dependencies pathId="compile.classpath" pomRefId="pom" useScope="compile"/>
    <artifact:dependencies pathId="testlibs.classpath" pomRefId="pom" useScope="test"/>
  </target>

  <target name="-prepare" depends="-init-maven-ant">
    <mkdir dir="${deploy.dir}"/>
    <path id="built.classpath">
      <path refid="compile.classpath"/>
      <pathelement location="${classes.dir}"/>
    </path>
    <path id="test.classpath">
      <path refid="testlibs.classpath"/>
      <pathelement location="${classes.dir}"/>
      <pathelement location="${tclasses.dir}"/>
    </path>
  </target>

  <target name="-preptools" depends="-prepare">
    <taskdef resource="com/threerings/presents/tools.properties" classpathref="compile.classpath"/>
  </target>

  <!-- cleans out the intermediate build files -->
  <target name="clean" depends="common-clean">
    <delete dir="${deploy.dir}/classes"/>
    <delete dir="${deploy.dir}/docs"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
  </target>

  <!-- wipes the entire build directory clean -->
  <target name="distclean" depends="common-clean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- common clean tasks -->
  <target name="common-clean">
    <ant dir="tests" target="clean"/>
  </target>

  <target name="compile" depends="-prepare" description="Builds the Java code.">
    <mkdir dir="${classes.dir}"/>
    <copy todir="${classes.dir}/rsrc">
      <fileset dir="rsrc" includes="**/*"/>
    </copy>
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on"
           source="1.5" target="1.5">
      <classpath refid="compile.classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <target name="javadoc" depends="-prepare" description="Builds the Java documentation">
    <mkdir dir="${deploy.dir}/docs"/>
    <javadoc sourcepath="${src.dir}" packagenames="com.threerings.*"
             destdir="${deploy.dir}/docs" stylesheetfile="docs/stylesheet.css"
             additionalparam="-breakiterator">
      <classpath refid="built.classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api"/>
      <link href="http://www.lwjgl.org/javadoc"/>
      <!-- ant documentation is not available online, sorry kids -->
      <link href="file:///usr/share/doc/ant-doc/javadocs"/>
      <link href="http://samskivert.com/code/samskivert/samskivert/docs/api"/>
      <link href="http://www.threerings.net/code/narya/docs/api"/>
      <link href="http://www.threerings.net/code/nenya/docs/api"/>
      <link href="http://www.threerings.net/code/vilya/docs/api"/>
    </javadoc>
  </target>

  <!-- builds the various tests -->
  <target name="tests">
    <ant dir="tests" target="compile"/>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,compile,javadoc,tests,dist"/>

  <target name="dist" depends="compile" description="Builds jar files.">
    <jar destfile="${deploy.dir}/${ant.project.name}.jar">
      <fileset dir="${classes.dir}" includes="com/**"/>
      <fileset dir="${classes.dir}" includes="rsrc/**"/>
    </jar>
  </target>

  <target name="gendobj" depends="-preptools"
          description="Generates additional methods for distributed object classes">
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="src/java" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on"
           source="1.5" target="1.5">
      <classpath refid="compile.classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <gendobj classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/*Object.java"/>
    </gendobj>
  </target>

  <target name="genservice" depends="-preptools"
          description="Generates marshaller and dispatcher classes for all invocation services">
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on"
           source="1.5" target="1.5">
      <classpath refid="compile.classpath"/>
      <include name="**/*Service.java"/>
    </javac>
    <!-- now generate the associated files -->
    <genservice header="lib/SOURCE_HEADER" classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/*Service.java"/>
    </genservice>
  </target>

</project>
